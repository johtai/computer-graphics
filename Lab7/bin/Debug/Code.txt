–ú–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:

private polyhedron LoadFromOBJ(string filePath)
{
    List<point> vertices = new List<point>();
    List<polygon> faces = new List<polygon>();

    foreach (var line in File.ReadLines(filePath))
    {
        if (line.StartsWith("v "))
        {
            var parts = line.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            double x = double.Parse(parts[1], CultureInfo.InvariantCulture);
            double y = double.Parse(parts[2], CultureInfo.InvariantCulture);
            double z = double.Parse(parts[3], CultureInfo.InvariantCulture);
            vertices.Add(new point(x, y, z));
        }
        else if (line.StartsWith("f "))
        {
            var parts = line.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            List<point> faceVertices = parts.Skip(1)
                                             .Select(index => vertices[int.Parse(index) - 1])
                                             .ToList();
            faces.Add(new polygon(faceVertices));
        }
    }

    return new polyhedron(vertices, faces);
}

private void SaveToOBJ(polyhedron polyhedron, string filePath)
{
    using (StreamWriter writer = new StreamWriter(filePath))
    {
        foreach (var vertex in polyhedron.Vertices)
        {
            writer.WriteLine($"v {vertex.X} {vertex.Y} {vertex.Z}");
        }

        foreach (var face in polyhedron.Faces)
        {
            var indices = face.Vertices.Select(v => polyhedron.Vertices.IndexOf(v) + 1);
            writer.WriteLine("f " + string.Join(" ", indices));
        }
    }
}



–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
private void LoadButton_Click(object sender, EventArgs e)
{
    OpenFileDialog openFileDialog = new OpenFileDialog();
    if (openFileDialog.ShowDialog() == DialogResult.OK)
    {
        pop = LoadFromOBJ(openFileDialog.FileName);
        pictureBox1.Invalidate();
    }
}

private void SaveButton_Click(object sender, EventArgs e)
{
    SaveFileDialog saveFileDialog = new SaveFileDialog();
    if (saveFileDialog.ShowDialog() == DialogResult.OK)
    {
        SaveToOBJ(pop, saveFileDialog.FileName);
    }
}


2. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã –≤—Ä–∞—â–µ–Ω–∏—è
–§–∏–≥—É—Ä–∞ –≤—Ä–∞—â–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç—Å—è –ø—É—Ç—ë–º –≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–æ—á–µ–∫ (–æ–±—Ä–∞–∑—É—é—â–µ–π) –≤–æ–∫—Ä—É–≥ –∑–∞–¥–∞–Ω–Ω–æ–π –æ—Å–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —É–≥–æ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ–±—Ä–∞–∑—É—é—â–∞—è –∑–∞–¥–∞–Ω–∞ –≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ 
ùëã
ùëç
XZ, –≤—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –æ—Å–∏ 
ùëå
Y —Å–æ–∑–¥–∞—Å—Ç —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É.

–ú–µ—Ç–æ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ñ–∏–≥—É—Ä—ã –≤—Ä–∞—â–µ–Ω–∏—è:
private polyhedron BuildRevolutionFigure(List<point> generatingCurve, int segments, string axis)
{
    List<point> vertices = new List<point>();
    List<polygon> faces = new List<polygon>();

    double angleStep = 360.0 / segments;

    for (int i = 0; i < segments; i++)
    {
        double angle = i * angleStep;
        double[,] rotationMatrix;

        switch (axis.ToUpper())
        {
            case "X":
                rotationMatrix = xRotationMatrix(angle);
                break;
            case "Y":
                rotationMatrix = yRotation(angle);
                break;
            case "Z":
                rotationMatrix = zRotation(angle);
                break;
            default:
                throw new ArgumentException("Invalid axis");
        }

        foreach (var point in generatingCurve)
        {
            vertices.Add(TransformToWorld(point, rotationMatrix));
        }
    }

    // –°–æ–∑–¥–∞—ë–º –≥—Ä–∞–Ω–∏ –º–µ–∂–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
    int count = generatingCurve.Count;
    for (int i = 0; i < segments; i++)
    {
        for (int j = 0; j < count - 1; j++)
        {
            var v1 = vertices[i * count + j];
            var v2 = vertices[i * count + j + 1];
            var v3 = vertices[((i + 1) % segments) * count + j + 1];
            var v4 = vertices[((i + 1) % segments) * count + j];

            faces.Add(new polygon(new List<point> { v1, v2, v3, v4 }));
        }
    }

    return new polyhedron(vertices, faces);
}


–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
private void BuildRevolutionButton_Click(object sender, EventArgs e)
{
    List<point> generatingCurve = new List<point>
    {
        new point(0, 0, 1),
        new point(0, 0, 2),
        new point(0, 1, 2)
    };

    pop = BuildRevolutionFigure(generatingCurve, 36, "Y");
    pictureBox1.Invalidate();
}


–ò—Ç–æ–≥
–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç:

–ó–∞–≥—Ä—É–∂–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–æ–¥–µ–ª–∏ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OBJ.
–°–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∏–≥—É—Ä—ã –≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–π –æ–±—Ä–∞–∑—É—é—â–µ–π, –æ—Å–∏ –≤—Ä–∞—â–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤.
